{
  "projects": [
    {
      "id": 1,
      "name": "Blog Application Using Fake Data from JSON",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, about, and blog pages.",
        "silver": "Implement dynamic routing to handle individual blog posts. Ensure that each post is accessible through a unique URL.",
        "gold": "Add meta headers for SEO purposes. Ensure that each blog post has a unique meta title and description."
      },
      "backend api": "https://jsonplaceholder.typicode.com/posts",
      "technical assignment": "Build a blog application that displays posts from a JSON file. Include dynamic routing and SEO meta headers.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with blog post listings",
        "Add routing for about and blog pages",
        "Integrate dynamic routing for individual blog posts",
        "Add meta headers for SEO"
      ],
      "stack": "React, React Router, CSS",
      "topics": "Routing, SEO, API Integration",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 2,
      "name": "E-commerce Storefront with Local Storage",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and product listing page. Implement basic routing for home, product details, and cart pages.",
        "silver": "Implement product search functionality. Add dynamic routing for individual product pages.",
        "gold": "Add a shopping cart using local storage. Implement checkout flow with form validation and summary page."
      },
      "backend api": "https://fakestoreapi.com/",
      "technical assignment": "Build a storefront for an e-commerce site with product listings, a cart, and a checkout flow. Include search functionality and responsive design.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with product listings",
        "Add routing for product details and cart pages",
        "Integrate product search",
        "Add dynamic routing for product pages",
        "Implement shopping cart with local storage",
        "Create checkout flow with validation"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, State Management, API Integration, Local Storage, Form Validation",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 3,
      "name": "Weather App with OpenWeatherMap API",
      "requirements": {
        "bronze": "Create a responsive layout with a header and footer. Implement a basic form to input city names and display current weather.",
        "silver": "Add dynamic background images based on weather conditions. Implement error handling for invalid city names.",
        "gold": "Implement a feature to save favorite cities and view their weather quickly."
      },
      "backend api": "https://openweathermap.org/api",
      "technical assignment": "Build a weather application that allows users to input a city name and view the current weather. Add features to handle errors and save favorite cities.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement city input form",
        "Integrate OpenWeatherMap API",
        "Display current weather data",
        "Add dynamic background images",
        "Implement error handling",
        "Add favorite cities feature"
      ],
      "stack": "React, CSS, OpenWeatherMap API",
      "topics": "API Integration, State Management, Error Handling, Local Storage",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 4,
      "name": "Recipe Sharing Platform",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, recipes, and submit recipe pages.",
        "silver": "Implement form validation for submitting recipes. Add dynamic routing for individual recipe pages.",
        "gold": "Integrate a search feature to find recipes by ingredients or name. Add a feature to rate and comment on recipes."
      },
      "backend api": "https://www.themealdb.com/api.php",
      "technical assignment": "Build a recipe sharing platform where users can submit, search, and rate recipes. Include responsive design and form validation.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with recipe listings",
        "Add routing for submit recipe page",
        "Implement form validation",
        "Add dynamic routing for recipe pages",
        "Integrate search feature",
        "Add rating and commenting feature"
      ],
      "stack": "React, React Router, CSS, TheMealDB API",
      "topics": "Routing, Form Validation, API Integration, State Management",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 5,
      "name": "Fitness Tracker with Google Charts",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, activities, and add activity pages.",
        "silver": "Integrate Google Charts to display activity data. Implement form validation for adding activities.",
        "gold": "Add user authentication to save activity data. Implement a dashboard to view overall fitness progress."
      },
      "backend api": "https://www.boredapi.com/api/activity",
      "technical assignment": "Build a fitness tracker application where users can log activities and view their progress. Include charts to visualize data and user authentication.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with activity listings",
        "Add routing for add activity page",
        "Integrate Google Charts",
        "Implement form validation",
        "Add user authentication",
        "Create dashboard for fitness progress"
      ],
      "stack": "React, React Router, CSS, Google Charts, Firebase",
      "topics": "Routing, Form Validation, API Integration, Data Visualization, Authentication",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 6,
      "name": "Task Management App with Drag-and-Drop",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and task pages.",
        "silver": "Integrate drag-and-drop functionality for task management. Implement form validation for adding and editing tasks.",
        "gold": "Add user authentication to save tasks. Implement a feature to categorize tasks and filter them by category."
      },
      "backend api": "https://jsonplaceholder.typicode.com/todos",
      "technical assignment": "Build a task management application with drag-and-drop functionality and user authentication. Include features for categorizing and filtering tasks.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with task listings",
        "Add routing for task pages",
        "Integrate drag-and-drop functionality",
        "Implement form validation",
        "Add user authentication",
        "Implement task categorization and filtering"
      ],
      "stack": "React, React Router, CSS, Firebase, React DnD",
      "topics": "Routing, Form Validation, API Integration, State Management, Authentication, Drag-and-Drop",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 7,
      "name": "Expense Tracker with Charts",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, add expense, and view expenses pages.",
        "silver": "Integrate charts to display expense data visually. Implement form validation for adding expenses.",
        "gold": "Add user authentication to save expense data. Implement a dashboard to view overall financial summary and trends."
      },
      "backend api": "https://api.exchangerate-api.com/",
      "technical assignment": "Build an expense tracker application where users can log expenses and view their financial summary. Include charts for data visualization and user authentication.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with expense listings",
        "Add routing for add expense page",
        "Integrate charts for data visualization",
        "Implement form validation",
        "Add user authentication",
        "Create dashboard for financial summary"
      ],
      "stack": "React, React Router, CSS, Chart.js, Firebase",
      "topics": "Routing, Form Validation, API Integration, Data Visualization, Authentication",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 8,
      "name": "Online Quiz Application",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, quiz, and results pages.",
        "silver": "Implement dynamic quiz generation from a JSON file. Add form validation for user inputs.",
        "gold": "Add a feature to track quiz progress and scores. Implement user authentication to save quiz results."
      },
      "backend api": "https://opentdb.com/",
      "technical assignment": "Build an online quiz application with dynamic quiz generation and user authentication. Include features to track progress and save results.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with quiz listings",
        "Add routing for quiz and results pages",
        "Integrate dynamic quiz generation",
        "Implement form validation",
        "Track quiz progress and scores",
        "Add user authentication",
        "Save quiz results for authenticated users"
      ],
      "stack": "React, React Router, CSS, Open Trivia Database API, Firebase",
      "topics": "Routing, Form Validation, API Integration, State Management, Authentication",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 9,
      "name": "Real-Time Chat Application",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and chat pages.",
        "silver": "Implement real-time chat functionality using WebSockets. Add form validation for user inputs.",
        "gold": "Add user authentication to save chat history. Implement a feature to create chat rooms and manage participants."
      },
      "backend api": "https://www.mockapi.io/",
      "technical assignment": "Build a real-time chat application with WebSocket integration and user authentication. Include features for creating chat rooms and managing participants.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with chat room listings",
        "Add routing for chat pages",
        "Integrate WebSocket for real-time chat",
        "Implement form validation",
        "Add user authentication",
        "Save chat history for authenticated users",
        "Create and manage chat rooms"
      ],
      "stack": "React, React Router, CSS, WebSocket, Firebase",
      "topics": "Routing, Form Validation, WebSocket Integration, State Management, Authentication",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 10,
      "name": "Portfolio Website",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main sections for home, about, and projects pages.",
        "silver": "Add a contact form with form validation. Implement dynamic routing for individual project pages.",
        "gold": "Integrate a blog section with dynamic posts. Add SEO meta headers for each page."
      },
      "backend api": "No backend API needed",
      "technical assignment": "Build a personal portfolio website with sections for home, about, projects, and a blog. Include a contact form and SEO features.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home, about, and projects pages",
        "Add contact form with validation",
        "Implement dynamic routing for project pages",
        "Integrate blog section",
        "Add SEO meta headers"
      ],
      "stack": "React, React Router, CSS",
      "topics": "Routing, Form Validation, SEO",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 11,
      "name": "Online Storefront with Product Search",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and product listing page. Implement basic routing for home, product details, and search results pages.",
        "silver": "Integrate product search functionality. Add dynamic routing for individual product pages.",
        "gold": "Add a shopping cart using local storage. Implement a feature to filter products by category."
      },
      "backend api": "https://fakestoreapi.com/",
      "technical assignment": "Build an online storefront with product listings, search functionality, and a shopping cart. Include responsive design and product filtering.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with product listings",
        "Add routing for product details and search results pages",
        "Integrate product search functionality",
        "Add dynamic routing for product pages",
        "Implement shopping cart with local storage",
        "Add product filtering feature"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, State Management, API Integration, Local Storage, Filtering",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 12,
      "name": "Task Tracker with Drag-and-Drop",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and task pages.",
        "silver": "Integrate drag-and-drop functionality for task management. Implement form validation for adding and editing tasks.",
        "gold": "Add user authentication to save tasks. Implement a feature to categorize tasks and filter them by category."
      },
      "backend api": "https://jsonplaceholder.typicode.com/todos",
      "technical assignment": "Build a task management application with drag-and-drop functionality and user authentication. Include features for categorizing and filtering tasks.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with task listings",
        "Add routing for task pages",
        "Integrate drag-and-drop functionality",
        "Implement form validation",
        "Add user authentication",
        "Implement task categorization and filtering"
      ],
      "stack": "React, React Router, CSS, Firebase, React DnD",
      "topics": "Routing, Form Validation, API Integration, State Management, Authentication, Drag-and-Drop",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 13,
      "name": "Recipe Finder App",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and search form. Implement basic routing for home and recipe details pages.",
        "silver": "Integrate API to fetch recipes based on search queries. Implement dynamic routing for individual recipe pages.",
        "gold": "Add a feature to save favorite recipes to local storage. Implement filtering and sorting options for search results."
      },
      "backend api": "https://www.themealdb.com/api.php",
      "technical assignment": "Build a recipe finder application that allows users to search for recipes and save their favorites. Include filtering, sorting, and dynamic routing.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement search form",
        "Add routing for recipe details page",
        "Integrate API to fetch recipes",
        "Add dynamic routing for recipe pages",
        "Implement saving favorite recipes to local storage",
        "Add filtering and sorting options"
      ],
      "stack": "React, React Router, CSS, TheMealDB API, Local Storage",
      "topics": "Routing, API Integration, State Management, Local Storage",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 14,
      "name": "Movie Database",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, movie details, and search results pages.",
        "silver": "Integrate API to fetch movie data based on search queries. Implement dynamic routing for individual movie pages.",
        "gold": "Add a feature to save favorite movies to local storage. Implement filtering and sorting options for search results."
      },
      "backend api": "https://www.omdbapi.com/",
      "technical assignment": "Build a movie database application that allows users to search for movies and save their favorites. Include filtering, sorting, and dynamic routing.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement search form",
        "Add routing for movie details page",
        "Integrate API to fetch movie data",
        "Add dynamic routing for movie pages",
        "Implement saving favorite movies to local storage",
        "Add filtering and sorting options"
      ],
      "stack": "React, React Router, CSS, OMDb API, Local Storage",
      "topics": "Routing, API Integration, State Management, Local Storage",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 15,
      "name": "Personal Diary App",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and diary entry pages.",
        "silver": "Implement form validation for adding and editing diary entries. Integrate local storage to save entries.",
        "gold": "Add a feature to search and filter diary entries. Implement a calendar view to navigate entries by date."
      },
      "backend api": "No backend API needed",
      "technical assignment": "Build a personal diary application where users can add, edit, and search diary entries. Include a calendar view for easy navigation.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with diary entry listings",
        "Add routing for diary entry pages",
        "Implement form validation",
        "Integrate local storage to save entries",
        "Add search and filter functionality",
        "Implement calendar view"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, Form Validation, State Management, Local Storage",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 16,
      "name": "Photo Gallery with Infinite Scroll",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and gallery pages.",
        "silver": "Integrate API to fetch photos and implement infinite scroll functionality. Add a lightbox feature to view photos in a larger size.",
        "gold": "Add a search feature to find photos by keyword. Implement a feature to save favorite photos to local storage."
      },
      "backend api": "https://jsonplaceholder.typicode.com/photos",
      "technical assignment": "Build a photo gallery application with infinite scroll and a lightbox feature. Include search functionality and the ability to save favorite photos.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with gallery listings",
        "Add routing for gallery pages",
        "Integrate API to fetch photos",
        "Implement infinite scroll functionality",
        "Add lightbox feature",
        "Implement search functionality",
        "Add saving favorite photos to local storage"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, API Integration, State Management, Infinite Scroll, Lightbox",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 17,
      "name": "Habit Tracker",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and habit pages.",
        "silver": "Implement form validation for adding and editing habits. Integrate local storage to save habit data.",
        "gold": "Add a feature to track habit progress over time. Implement a dashboard to view overall habit performance."
      },
      "backend api": "No backend API needed",
      "technical assignment": "Build a habit tracker application where users can add, edit, and track their habits. Include a dashboard to view progress over time.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with habit listings",
        "Add routing for habit pages",
        "Implement form validation",
        "Integrate local storage to save habit data",
        "Track habit progress over time",
        "Create dashboard for overall performance"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, Form Validation, State Management, Local Storage",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 18,
      "name": "Markdown Blog",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, blog, and create post pages.",
        "silver": "Implement a markdown editor for creating blog posts. Add dynamic routing for individual blog posts.",
        "gold": "Integrate local storage to save blog posts. Implement a feature to search and filter blog posts."
      },
      "backend api": "No backend API needed",
      "technical assignment": "Build a markdown blog application where users can create, view, and manage blog posts. Include search functionality and local storage for saving posts.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with blog post listings",
        "Add routing for create post page",
        "Implement markdown editor",
        "Add dynamic routing for blog posts",
        "Integrate local storage to save blog posts",
        "Implement search and filter functionality"
      ],
      "stack": "React, React Router, CSS, Local Storage, Markdown",
      "topics": "Routing, Form Validation, State Management, Local Storage, Markdown",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 19,
      "name": "Productivity Dashboard",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, tasks, and statistics pages.",
        "silver": "Implement form validation for adding and editing tasks. Integrate local storage to save task data.",
        "gold": "Add charts to visualize task completion and productivity. Implement a feature to categorize and filter tasks."
      },
      "backend api": "No backend API needed",
      "technical assignment": "Build a productivity dashboard where users can manage tasks and view their productivity statistics. Include charts for data visualization and task categorization.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with task listings",
        "Add routing for tasks and statistics pages",
        "Implement form validation",
        "Integrate local storage to save task data",
        "Add charts for data visualization",
        "Implement task categorization and filtering"
      ],
      "stack": "React, React Router, CSS, Local Storage, Chart.js",
      "topics": "Routing, Form Validation, State Management, Local Storage, Data Visualization",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 20,
      "name": "Simple Blogging Platform",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, blog, and create post pages.",
        "silver": "Implement form validation for creating blog posts. Add dynamic routing for individual blog posts.",
        "gold": "Integrate local storage to save blog posts. Implement a feature to edit and delete blog posts."
      },
      "backend api": "No backend API needed",
      "technical assignment": "Build a simple blogging platform where users can create, view, and manage blog posts. Include form validation and local storage for saving posts.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with blog post listings",
        "Add routing for create post page",
        "Implement form validation",
        "Add dynamic routing for blog posts",
        "Integrate local storage to save blog posts",
        "Implement edit and delete functionality for blog posts"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, Form Validation, State Management, Local Storage",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 21,
      "name": "E-commerce Storefront with Local Storage",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and product listing page. Implement basic routing for home, product details, and cart pages.",
        "silver": "Implement product search functionality. Add dynamic routing for individual product pages.",
        "gold": "Add a shopping cart using local storage. Implement checkout flow with form validation and summary page."
      },
      "backend api": "https://fakestoreapi.com/",
      "technical assignment": "Build a storefront for an e-commerce site with product listings, a cart, and a checkout flow. Include search functionality and responsive design.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with product listings",
        "Add routing for product details and cart pages",
        "Integrate product search",
        "Add dynamic routing for product pages",
        "Implement shopping cart with local storage",
        "Create checkout flow with validation"
      ],
      "stack": "React, React Router, CSS, Local Storage",
      "topics": "Routing, State Management, API Integration, Local Storage, Form Validation",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 22,
      "name": "Weather App with OpenWeatherMap API",
      "requirements": {
        "bronze": "Create a responsive layout with a header and footer. Implement a basic form to input city names and display current weather.",
        "silver": "Add dynamic background images based on weather conditions. Implement error handling for invalid city names.",
        "gold": "Implement a feature to save favorite cities and view their weather quickly."
      },
      "backend api": "https://openweathermap.org/api",
      "technical assignment": "Build a weather application that allows users to input a city name and view the current weather. Add features to handle errors and save favorite cities.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement city input form",
        "Integrate OpenWeatherMap API",
        "Display current weather data",
        "Add dynamic background images",
        "Implement error handling",
        "Add favorite cities feature"
      ],
      "stack": "React, CSS, OpenWeatherMap API",
      "topics": "API Integration, State Management, Error Handling, Local Storage",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 23,
      "name": "Recipe Sharing Platform",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, recipes, and submit recipe pages.",
        "silver": "Implement form validation for submitting recipes. Add dynamic routing for individual recipe pages.",
        "gold": "Integrate a search feature to find recipes by ingredients or name. Add a feature to rate and comment on recipes."
      },
      "backend api": "https://www.themealdb.com/api.php",
      "technical assignment": "Build a recipe sharing platform where users can submit, search, and rate recipes. Include responsive design and form validation.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with recipe listings",
        "Add routing for submit recipe page",
        "Implement form validation",
        "Add dynamic routing for recipe pages",
        "Integrate search feature",
        "Add rating and commenting feature"
      ],
      "stack": "React, React Router, CSS, TheMealDB API",
      "topics": "Routing, Form Validation, API Integration, State Management",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 24,
      "name": "Fitness Tracker with Google Charts",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, activities, and add activity pages.",
        "silver": "Integrate Google Charts to display activity data. Implement form validation for adding activities.",
        "gold": "Add user authentication to save activity data. Implement a dashboard to view overall fitness progress."
      },
      "backend api": "https://www.boredapi.com/api/activity",
      "technical assignment": "Build a fitness tracker application where users can log activities and view their progress. Include charts to visualize data and user authentication.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with activity listings",
        "Add routing for add activity page",
        "Integrate Google Charts",
        "Implement form validation",
        "Add user authentication",
        "Create dashboard for fitness progress"
      ],
      "stack": "React, React Router, CSS, Google Charts, Firebase",
      "topics": "Routing, Form Validation, API Integration, Data Visualization, Authentication",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 25,
      "name": "Task Management App with Drag-and-Drop",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home and task pages.",
        "silver": "Integrate drag-and-drop functionality for task management. Implement form validation for adding and editing tasks.",
        "gold": "Add user authentication to save tasks. Implement a feature to categorize tasks and filter them by category."
      },
      "backend api": "https://jsonplaceholder.typicode.com/todos",
      "technical assignment": "Build a task management application with drag-and-drop functionality and user authentication. Include features for categorizing and filtering tasks.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with task listings",
        "Add routing for task pages",
        "Integrate drag-and-drop functionality",
        "Implement form validation",
        "Add user authentication",
        "Implement task categorization and filtering"
      ],
      "stack": "React, React Router, CSS, Firebase, React DnD",
      "topics": "Routing, Form Validation, API Integration, State Management, Authentication, Drag-and-Drop",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 26,
      "name": "Expense Tracker with Charts",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, add expense, and view expenses pages.",
        "silver": "Integrate charts to display expense data visually. Implement form validation for adding expenses.",
        "gold": "Add user authentication to save expense data. Implement a dashboard to view overall financial summary and trends."
      },
      "backend api": "https://api.exchangerate-api.com/",
      "technical assignment": "Build an expense tracker application where users can log expenses and view their financial summary. Include charts for data visualization and user authentication.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with expense listings",
        "Add routing for add expense page",
        "Integrate charts for data visualization",
        "Implement form validation",
        "Add user authentication",
        "Create dashboard for financial summary"
      ],
      "stack": "React, React Router, CSS, Chart.js, Firebase",
      "topics": "Routing, Form Validation, API Integration, Data Visualization, Authentication",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 27,
      "name": "Online Quiz Application",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, quiz, and results pages.",
        "silver": "Implement dynamic quiz generation from a JSON file. Add form validation for user inputs.",
        "gold": "Add a feature to track quiz progress and scores. Implement user authentication to save quiz results."
      },
      "backend api": "https://opentdb.com/",
      "technical assignment": "Build an online quiz application with dynamic quiz generation and user authentication. Include features to track progress and save results.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with quiz listings",
        "Add routing for quiz and results pages",
        "Integrate dynamic quiz generation",
        "Implement form validation",
        "Track quiz progress and scores",
        "Add user authentication",
        "Save quiz results for authenticated users"
      ],
      "stack": "React, React Router, CSS, Open Trivia Database API, Firebase",
      "topics": "Routing, Form Validation, API Integration, State Management, Authentication",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 28,
      "name": "Chat Application with WebSockets",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and chat section. Implement basic routing for home and chat pages.",
        "silver": "Integrate WebSockets to enable real-time messaging. Add form validation for user inputs.",
        "gold": "Add user authentication to save chat history. Implement a feature to create and join chat rooms."
      },
      "backend api": "https://socket.io/",
      "technical assignment": "Build a chat application with real-time messaging using WebSockets. Include user authentication and chat room features.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with chat listings",
        "Add routing for chat pages",
        "Integrate WebSockets for real-time messaging",
        "Implement form validation",
        "Add user authentication",
        "Create and join chat rooms",
        "Save chat history for authenticated users"
      ],
      "stack": "React, React Router, CSS, Socket.io, Firebase",
      "topics": "Routing, Form Validation, API Integration, Real-Time Communication, Authentication",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 29,
      "name": "Portfolio Website with GitHub API",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, projects, and contact pages.",
        "silver": "Integrate GitHub API to display user's repositories. Implement form validation for contact form.",
        "gold": "Add a blog section with dynamic routing for individual posts. Implement a feature to filter projects by language."
      },
      "backend api": "https://api.github.com/",
      "technical assignment": "Build a portfolio website with project listings from GitHub and a contact form. Include a blog section and project filtering.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with project listings",
        "Add routing for projects and contact pages",
        "Integrate GitHub API",
        "Implement form validation",
        "Add blog section with dynamic routing",
        "Implement project filtering"
      ],
      "stack": "React, React Router, CSS, GitHub API",
      "topics": "Routing, Form Validation, API Integration, State Management",
      "difficulty": "easy",
      "approved": true
    },
    {
      "id": 30,
      "name": "Online Bookstore with Payment Integration",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and product listing page. Implement basic routing for home, product details, and cart pages.",
        "silver": "Integrate payment gateway for purchasing books. Implement form validation for user inputs.",
        "gold": "Add user authentication to save order history. Implement a feature to rate and review books."
      },
      "backend api": "https://api.itbook.store/1.0/",
      "technical assignment": "Build an online bookstore with payment integration and user authentication. Include features to rate and review books.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with product listings",
        "Add routing for product details and cart pages",
        "Integrate payment gateway",
        "Implement form validation",
        "Add user authentication",
        "Create order history feature",
        "Implement rating and reviewing feature"
      ],
      "stack": "React, React Router, CSS, Stripe API, Firebase",
      "topics": "Routing, Form Validation, API Integration, State Management, Payment Integration, Authentication",
      "difficulty": "hard",
      "approved": true
    },
    {
      "id": 31,
      "name": "Movie Recommendation System",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, movies, and recommendations pages.",
        "silver": "Integrate a movie recommendation API. Implement form validation for user inputs.",
        "gold": "Add user authentication to save movie preferences. Implement a feature to rate and review movies."
      },
      "backend api": "https://www.themoviedb.org/documentation/api",
      "technical assignment": "Build a movie recommendation system with API integration and user authentication. Include features to save preferences and review movies.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with movie listings",
        "Add routing for movies and recommendations pages",
        "Integrate movie recommendation API",
        "Implement form validation",
        "Add user authentication",
        "Create feature to save movie preferences",
        "Implement rating and reviewing feature"
      ],
      "stack": "React, React Router, CSS, TMDb API, Firebase",
      "topics": "Routing, Form Validation, API Integration, State Management, Authentication",
      "difficulty": "medium",
      "approved": true
    },
    {
      "id": 32,
      "name": "Personal Finance Dashboard",
      "requirements": {
        "bronze": "Create a responsive layout with a header, footer, and main section. Implement basic routing for home, add transaction, and view transactions pages.",
        "silver": "Integrate charts to display transaction data visually. Implement form validation for adding transactions.",
        "gold": "Add user authentication to save transaction data. Implement a dashboard to view overall financial summary and trends."
      },
      "backend api": "https://api.exchangerate-api.com/",
      "technical assignment": "Build a personal finance dashboard where users can log transactions and view their financial summary. Include charts for data visualization and user authentication.",
      "tasks": [
        "Set up project structure",
        "Create responsive header and footer",
        "Implement home page with transaction listings",
        "Add routing for add transaction page",
        "Integrate charts for data visualization",
        "Implement form validation",
        "Add user authentication",
        "Create dashboard for financial summary"
      ],
      "stack": "React, React Router, CSS, Chart.js, Firebase",
      "topics": "Routing, Form Validation, API Integration, Data Visualization, Authentication",
      "difficulty": "hard",
      "approved": true
    }
  ]
}
